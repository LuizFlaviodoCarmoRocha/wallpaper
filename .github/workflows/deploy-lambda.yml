name: Deploy Lambda Only

on:
  workflow_dispatch:
    inputs:
      test_after_deploy:
        description: 'Run tests after deployment'
        required: false
        default: true
        type: boolean
  push:
    paths:
      - 'aws-resources/lambda/**'
    branches: [ main ]
    # Only run if this is NOT part of a larger deployment
    # (prevents duplicate runs when main workflow handles both)

env:
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: bedrock-proxy

jobs:
  check-deployment-scope:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Check if this is a Lambda-only change
      id: check
      run: |
        # Get files changed in this push
        CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # Check if ONLY Lambda files changed (and not other parts of the app)
        LAMBDA_CHANGES=$(echo "$CHANGED_FILES" | grep -c "^aws-resources/lambda/" || echo "0")
        TOTAL_CHANGES=$(echo "$CHANGED_FILES" | wc -l)
        
        echo "Lambda changes: $LAMBDA_CHANGES"
        echo "Total changes: $TOTAL_CHANGES"
        
        # Only deploy Lambda separately if:
        # 1. This is a manual trigger OR
        # 2. ONLY Lambda files changed (no frontend/workflow changes)
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "Manual trigger - deploying Lambda"
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        elif [ "$LAMBDA_CHANGES" -gt 0 ] && [ "$TOTAL_CHANGES" -eq "$LAMBDA_CHANGES" ]; then
          echo "Lambda-only changes detected - deploying"
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        else
          echo "Mixed changes detected - main workflow will handle deployment"
          echo "should_deploy=false" >> $GITHUB_OUTPUT
        fi

  deploy-lambda:
    needs: check-deployment-scope
    runs-on: ubuntu-latest
    if: needs.check-deployment-scope.outputs.should_deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Lambda function syntax
      run: |
        python3 -m py_compile aws-resources/lambda/lambda_function_openai.py
        echo "✅ Lambda function syntax validation passed"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy Lambda Function
      run: |
        echo "🚀 Deploying Lambda function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        cd aws-resources/lambda
        
        # Create deployment package
        zip lambda-deployment.zip lambda_function_openai.py
        
        # Get current function info
        CURRENT_INFO=$(aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --region ${{ env.AWS_REGION }})
        CURRENT_HASH=$(echo $CURRENT_INFO | jq -r '.Configuration.CodeSha256')
        CURRENT_MODIFIED=$(echo $CURRENT_INFO | jq -r '.Configuration.LastModified')
        
        echo "Current hash: $CURRENT_HASH"
        echo "Last modified: $CURRENT_MODIFIED"
        
        # Update function code
        echo "Updating function code..."
        NEW_INFO=$(aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb://lambda-deployment.zip \
          --region ${{ env.AWS_REGION }})
        
        NEW_HASH=$(echo $NEW_INFO | jq -r '.CodeSha256')
        NEW_MODIFIED=$(echo $NEW_INFO | jq -r '.LastModified')
        
        echo "New hash: $NEW_HASH"
        echo "New modified: $NEW_MODIFIED"
        
        # Clean up
        rm lambda-deployment.zip
        
        if [ "$CURRENT_HASH" != "$NEW_HASH" ]; then
          echo "✅ Lambda function updated successfully"
          echo "FUNCTION_UPDATED=true" >> $GITHUB_ENV
        else
          echo "ℹ️ Lambda function code unchanged"
          echo "FUNCTION_UPDATED=false" >> $GITHUB_ENV
        fi
        
    - name: Test Lambda Function
      if: ${{ inputs.test_after_deploy != false }}
      run: |
        echo "🧪 Testing deployed Lambda function..."
        
        # Test with different fact counts
        for FACT_COUNT in 3 5 7; do
          echo "Testing with $FACT_COUNT facts..."
          
          cat > test-payload-$FACT_COUNT.json << PAYLOAD
        {
          "httpMethod": "POST",
          "body": "{\"prompt\": \"Generate exactly $FACT_COUNT fun trivia facts about the Eagle Nebula\"}"
        }
        PAYLOAD
          
          # Invoke function
          aws lambda invoke \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --payload fileb://test-payload-$FACT_COUNT.json \
            --region ${{ env.AWS_REGION }} \
            response-$FACT_COUNT.json
          
          # Check response
          STATUS_CODE=$(cat response-$FACT_COUNT.json | jq -r '.statusCode')
          if [ "$STATUS_CODE" = "200" ]; then
            ACTUAL_COUNT=$(cat response-$FACT_COUNT.json | jq -r '.body' | jq -r '.facts | length')
            echo "  ✅ Expected $FACT_COUNT facts, got $ACTUAL_COUNT"
            
            if [ "$ACTUAL_COUNT" != "$FACT_COUNT" ]; then
              echo "  ⚠️ Fact count mismatch, but function working"
            fi
          else
            echo "  ❌ Test failed for $FACT_COUNT facts"
            cat response-$FACT_COUNT.json
            exit 1
          fi
        done
        
        echo "✅ All Lambda tests passed!"
        
        # Clean up test files
        rm test-payload-*.json response-*.json
        
    - name: Summary
      if: needs.check-deployment-scope.outputs.should_deploy == 'true'
      run: |
        echo "📋 Deployment Summary"
        echo "===================="
        echo "Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "Region: ${{ env.AWS_REGION }}"
        echo "Updated: ${{ env.FUNCTION_UPDATED }}"
        echo "Tests: ${{ inputs.test_after_deploy != false && '✅ Passed' || '⏭️ Skipped' }}"
        
        if [ "${{ env.FUNCTION_UPDATED }}" = "true" ]; then
          echo ""
          echo "🎉 Lambda function deployment completed successfully!"
          echo "The trivia feature should now be updated with the latest changes."
        fi
        
  skip-deployment:
    needs: check-deployment-scope  
    runs-on: ubuntu-latest
    if: needs.check-deployment-scope.outputs.should_deploy == 'false'
    
    steps:
    - name: Skip Deployment
      run: |
        echo "⏭️ Skipping Lambda-only deployment"
        echo "📝 Mixed changes detected - main deployment workflow will handle both frontend and Lambda"
        echo "🔗 Check the 'Deploy to S3 and Lambda' workflow for complete deployment status"
