name: Deploy to S3 and Lambda

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: bedrock-proxy
  S3_BUCKET: rjmette-wallpaper
  CLOUDFRONT_DISTRIBUTION_ID: E3T87UCNP843YL

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Validate Lambda function syntax
      run: |
        python3 -m py_compile aws-resources/lambda/lambda_function_openai.py
        echo "Lambda function syntax validation passed"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy Lambda Function
      run: |
        echo "Deploying Lambda function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        cd aws-resources/lambda
        
        # Create deployment package
        zip lambda-deployment.zip lambda_function_openai.py
        
        # Get current function info for comparison
        CURRENT_HASH=$(aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --region ${{ env.AWS_REGION }} --query 'Configuration.CodeSha256' --output text)
        echo "Current Lambda hash: $CURRENT_HASH"
        
        # Update function code
        NEW_INFO=$(aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --zip-file fileb://lambda-deployment.zip \
          --region ${{ env.AWS_REGION }})
        
        NEW_HASH=$(echo $NEW_INFO | jq -r '.CodeSha256')
        echo "New Lambda hash: $NEW_HASH"
        
        # Clean up
        rm lambda-deployment.zip
        
        if [ "$CURRENT_HASH" != "$NEW_HASH" ]; then
          echo "✅ Lambda function updated successfully"
        else
          echo "ℹ️ Lambda function code unchanged"
        fi
        
    - name: Deploy to S3
      run: |
        echo "Deploying frontend to S3: ${{ env.S3_BUCKET }}"
        aws s3 sync dist/ s3://${{ env.S3_BUCKET }} --delete
        echo "✅ Frontend deployed to S3 successfully"
        
    - name: Invalidate CloudFront
      run: |
        echo "Invalidating CloudFront distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
        INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*" \
          --query 'Invalidation.Id' \
          --output text)
        echo "✅ CloudFront invalidation created: $INVALIDATION_ID"
        
    - name: Test Lambda Function
      run: |
        echo "Testing deployed Lambda function..."
        
        # Test payload
        cat > test-payload.json << 'PAYLOAD'
        {
          "httpMethod": "POST",
          "body": "{\"prompt\": \"Generate exactly 3 fun trivia facts about the Orion Nebula\"}"
        }
        PAYLOAD
        
        # Invoke function
        aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --payload fileb://test-payload.json \
          --region ${{ env.AWS_REGION }} \
          response.json
        
        # Check response
        STATUS_CODE=$(cat response.json | jq -r '.statusCode')
        if [ "$STATUS_CODE" = "200" ]; then
          echo "✅ Lambda function test passed"
          FACTS_COUNT=$(cat response.json | jq -r '.body' | jq -r '.facts | length')
          echo "Generated $FACTS_COUNT trivia facts"
        else
          echo "❌ Lambda function test failed"
          cat response.json
          exit 1
        fi
        
        # Clean up
        rm test-payload.json response.json

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deployment Summary
      run: |
        echo "🚀 Deployment Summary"
        echo "===================="
        echo "Frontend: https://wallpaper.rbios.net"
        echo "Lambda: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "Status: ${{ needs.deploy.result }}"
        
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "✅ Deployment completed successfully!"
        else
          echo "❌ Deployment failed"
        fi
